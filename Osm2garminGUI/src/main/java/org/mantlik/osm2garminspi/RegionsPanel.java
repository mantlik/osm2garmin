/*
 * #%L
 * Osm2garminGUI
 * %%
 * Copyright (C) 2011 Frantisek Mantlik <frantisek at mantlik.cz>
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-2.0.html>.
 * #L%
 */
package org.mantlik.osm2garminspi;

import java.awt.Color;
import java.awt.Component;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Scanner;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.mantlik.osm2garmin.Osm2garmin;
import org.mantlik.osm2garmin.Region;
import org.mantlik.osm2garmin.Utilities;
import org.openide.awt.HtmlBrowser;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

final class RegionsPanel extends javax.swing.JPanel implements ListSelectionListener {

    private final RegionsOptionsPanelController controller;
    private int selectedRow = -1;
    private TableCellEditor editor;

    RegionsPanel(RegionsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        regionsTable.getSelectionModel().addListSelectionListener(this);
        regionsTable.setDefaultRenderer(Float.class, new PolygonRenderer());
        editor = regionsTable.getCellEditor();
        moveDownRegionButton.setEnabled(false);
        moveUpRegionButton.setEnabled(false);
        displayRegionButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        regionsTable = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if (colIndex < 2) {
                    return true;
                }
                return polyNotExists(rowIndex);
            }
        };
        addRegionButton = new javax.swing.JButton();
        moveUpRegionButton = new javax.swing.JButton();
        moveDownRegionButton = new javax.swing.JButton();
        deleteRegionButton = new javax.swing.JButton();
        displayRegionButton = new javax.swing.JButton();
        autoSplitPlanetItem = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        nodesPerRegionItem = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.jPanel3.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 12), new java.awt.Color(51, 153, 255))); // NOI18N

        regionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enabled", "Name", "Lat1", "Lon1", "Lat2", "Lon2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        regionsTable.setToolTipText(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.toolTipText")); // NOI18N
        regionsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        regionsTable.getTableHeader().setReorderingAllowed(false);
        regionsTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                regionsTablePropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(regionsTable);
        if (regionsTable.getColumnModel().getColumnCount() > 0) {
            regionsTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title5")); // NOI18N
            regionsTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title0_1")); // NOI18N
            regionsTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title1_1")); // NOI18N
            regionsTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title2_1")); // NOI18N
            regionsTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title3_1")); // NOI18N
            regionsTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.regionsTable.columnModel.title4_1")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(addRegionButton, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.addRegionButton.text")); // NOI18N
        addRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRegionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(moveUpRegionButton, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.moveUpRegionButton.text")); // NOI18N
        moveUpRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpRegionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(moveDownRegionButton, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.moveDownRegionButton.text")); // NOI18N
        moveDownRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownRegionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteRegionButton, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.deleteRegionButton.text")); // NOI18N
        deleteRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRegionButtonActionPerformed(evt);
            }
        });

        displayRegionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mantlik/osm2garminspi/Globe.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(displayRegionButton, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.displayRegionButton.text")); // NOI18N
        displayRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRegionButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(autoSplitPlanetItem, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.autoSplitPlanetItem.text")); // NOI18N
        autoSplitPlanetItem.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                autoSplitPlanetItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.jLabel1.text")); // NOI18N

        nodesPerRegionItem.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nodesPerRegionItem.setText(org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.nodesPerRegionItem.text")); // NOI18N
        nodesPerRegionItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nodesPerRegionItemPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RegionsPanel.class, "RegionsPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(autoSplitPlanetItem)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nodesPerRegionItem, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRegionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveUpRegionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveDownRegionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRegionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayRegionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(addRegionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveUpRegionButton)
                        .addGap(5, 5, 5)
                        .addComponent(moveDownRegionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRegionButton)
                        .addGap(0, 49, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(autoSplitPlanetItem)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nodesPerRegionItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(displayRegionButton)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRegionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        model.addRow(new Object[]{true, "new_region", 0.0f, 0.0f, 0.0f, 0.0f});
    }//GEN-LAST:event_addRegionButtonActionPerformed

    private void moveUpRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpRegionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        if (selectedRow > 0) {
            model.moveRow(selectedRow, selectedRow, selectedRow - 1);
            regionsTable.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
        }
    }//GEN-LAST:event_moveUpRegionButtonActionPerformed

    private void moveDownRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownRegionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        if (selectedRow < regionsTable.getRowCount() - 1) {
            model.moveRow(selectedRow, selectedRow, selectedRow + 1);
            regionsTable.setRowSelectionInterval(selectedRow + 1, selectedRow + 1);
        }
    }//GEN-LAST:event_moveDownRegionButtonActionPerformed

    private void deleteRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRegionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        model.removeRow(selectedRow);
    }//GEN-LAST:event_deleteRegionButtonActionPerformed

    private void displayRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRegionButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        String rname = NbPreferences.forModule(Osm2garmin.class).get("userdir",
                System.getProperty("netbeans.user") + "/") + "regions.html";
        File r = new File(rname);
        try {
            PrintStream printer = new PrintStream(r);
            printer.println("<html><head>");
            printer.println("<title>Regions Interactive Map</title>");
            printer.println("<meta charset=\"utf-8\" />\n"
                    + "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                    + "    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.1.0/dist/leaflet.css\" integrity=\"sha512-wcw6ts8Anuw10Mzh9Ytw4pylW8+NAD4ch3lqm9lzAsTxg0GFeJgoAtxuCLREZSC5lUXdVyo/7yfsqFjQ4S+aKw==\" crossorigin=\"\"/>\n"
                    + "    <script src=\"https://unpkg.com/leaflet@1.1.0/dist/leaflet.js\" integrity=\"sha512-mNqn2Wg7tSToJhvHcqfzLMU6J4mkOImSPTxVZAdo+lcPlk+GhZmYgACEe0x35K7YzW1zJ7XyJV/TT1MrdXvMcA==\" crossorigin=\"\"></script>");
            printer.println("</head><body>");
            printer.println("<center>\n"
                    + "<div id=\"title\"><h3>Regions Interactive Map</h3></div>\n"
                    + "<div id=\"mapid\" style=\"width: 800px; height: 600px;\"></div>\n"
                    + "<script>\n"
                    + "\n"
                    + "        // set up the map\n"
                    + "	mymap = new L.Map('mapid').setView([0,0],1);\n"
                    + "\n"
                    + "	// create the tile layer with correct attribution\n"
                    + "	var osmUrl='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n"
                    + "	var osmAttrib='Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n"
                    + "	var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 18, attribution: osmAttrib});		\n"
                    + "        mymap.addLayer(osm);\n");
            if (autoSplitPlanetItem.isSelected()) {
                File autoregfile = new File(new File(NbPreferences.forModule(Osm2garmin.class).get("regions",
                        System.getProperty("netbeans.user") + "/" + "regions.txt")).getParentFile(), "autoregions.txt");
                if (autoregfile.exists()) {
                    Scanner sc = new Scanner(new BufferedReader(new FileReader(autoregfile)));
                    while (sc.hasNextLine()) {
                        boolean enabled = true;
                        String[] reg = sc.nextLine().split(" +");
                        String name = reg[4];
                        float lon1 = Float.parseFloat(reg[0]);
                        float lat1 = Float.parseFloat(reg[1]);
                        float lon2 = Float.parseFloat(reg[2]);
                        float lat2 = Float.parseFloat(reg[3]);
                        int weight = 1;
                        String color = enabled ? "blue" : "gray";
                        printer.println("L.rectangle([["
                                + lat1 + "," + lon1 + "],[" + lat2 + "," + lon2
                                + "]],{color:\"" + color + "\", weight:" + weight
                                + "}).bindTooltip(\"" + name + "\").addTo(mymap);");
                    }
                }
            } else {
                for (int i = 0; i < regionsTable.getRowCount(); i++) {
                    boolean enabled = (Boolean) model.getValueAt(i, 0);
                    String name = (String) model.getValueAt(i, 1);
                    float lat1 = (Float) model.getValueAt(i, 2);
                    float lon1 = (Float) model.getValueAt(i, 3);
                    float lat2 = (Float) model.getValueAt(i, 4);
                    float lon2 = (Float) model.getValueAt(i, 5);
                    int weight = i == selectedRow ? 2 : 1;
                    String color = enabled ? "blue" : "gray";
                    printer.println("L.rectangle([["
                            + lat1 + "," + lon1 + "],[" + lat2 + "," + lon2
                            + "]],{color:\"" + color + "\", weight:" + weight
                            + "}).bindTooltip(\"" + name + "\").addTo(mymap);");
                }
            }
            printer.println("	var popup = L.popup();\n"
                    + "\n"
                    + "	function onMapClick(e) {\n"
                    + "		popup\n"
                    + "			.setLatLng(e.latlng)\n"
                    + "			.setContent(e.latlng.toString())\n"
                    + "			.openOn(mymap);\n"
                    + "	}\n"
                    + "\n"
                    + "	mymap.on('click', onMapClick);\n"
                    + "\n"
                    + "</script>\n"
                    + "</center>");
            printer.println("</body></html>");
            printer.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        try {
            URL aurl = new URL("file:///" + rname); // NOI18N
            // org.openide.awt.StatusDisplayer.getDefault().setStatusText("Opening browser...");
            HtmlBrowser.URLDisplayer.getDefault().showURL(aurl);
        } catch (MalformedURLException ex) {
            //ignore
        }
    }//GEN-LAST:event_displayRegionButtonActionPerformed

    private void regionsTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_regionsTablePropertyChange
        controller.changed();
    }//GEN-LAST:event_regionsTablePropertyChange

    private void nodesPerRegionItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nodesPerRegionItemPropertyChange
        String nodesPerRegion = "" + (Integer.parseInt(nodesPerRegionItem.getText()) * 1000000);
        if (!nodesPerRegion.equals(NbPreferences.forModule(Osm2garmin.class).get("nodes_per_region", "400000000"))) {
            controller.changed();
        }
    }//GEN-LAST:event_nodesPerRegionItemPropertyChange

    private void autoSplitPlanetItemStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_autoSplitPlanetItemStateChanged
        regionsTable.setEnabled(!autoSplitPlanetItem.isSelected());
        nodesPerRegionItem.setEnabled(autoSplitPlanetItem.isSelected());
        if (autoSplitPlanetItem.isSelected()) {
            moveDownRegionButton.setEnabled(false);
            moveUpRegionButton.setEnabled(false);
            displayRegionButton.setEnabled(true);
            deleteRegionButton.setEnabled(false);
            addRegionButton.setEnabled(false);
        } else {
            displayRegionButton.setEnabled(true);
            deleteRegionButton.setEnabled(true);
            addRegionButton.setEnabled(true);
        }
        controller.changed();
    }//GEN-LAST:event_autoSplitPlanetItemStateChanged

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(RegionsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(RegionsPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        File r = new File(NbPreferences.forModule(Osm2garmin.class).get("regions",
                System.getProperty("netbeans.user") + "/" + "regions.txt"));
        if (!r.exists()) {
            try {
                Utilities.copyFile(Osm2garmin.class.getResourceAsStream("regions.txt"),
                        r);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        Scanner s;
        DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(model.getRowCount() - 1);
        }
        File regDir = r.getParentFile();
        try {
            s = new Scanner(new FileInputStream(r));
            while (s.hasNext()) {
                String[] l = s.nextLine().split(" +");
                if (l.length >= 5 && !(l[0].startsWith("#"))) {
                    boolean enabled = true;
                    if (l[0].startsWith("x")) {
                        enabled = false;
                        l[0] = l[0].replace("x", "");
                    }
                    String name = l[4];
                    File polyFile = null;
                    if (regDir != null) {
                        polyFile = new File(regDir, name + ".poly");
                    }
                    float lon1, lat1, lon2, lat2;
                    if ((polyFile != null) && polyFile.exists()) {
                        float[] f = Region.envelope(polyFile);
                        lon1 = f[0];
                        lat1 = f[1];
                        lon2 = f[2];
                        lat2 = f[3];
                    } else {
                        lon1 = Float.parseFloat(l[0]);
                        lat1 = Float.parseFloat(l[1]);
                        lon2 = Float.parseFloat(l[2]);
                        lat2 = Float.parseFloat(l[3]);
                    }
                    model.insertRow(model.getRowCount(), new Object[]{enabled, name, lat1, lon1, lat2, lon2});
                }
            }
            String nodesPerRegion = NbPreferences.forModule(Osm2garmin.class).get("nodes_per_region",
                    "400000000");
            nodesPerRegionItem.setText("" + (Integer.parseInt(nodesPerRegion) / 1000000));
            autoSplitPlanetItem.setSelected(NbPreferences.forModule(Osm2garmin.class).get("auto_split_planet",
                "false").equals("true"));
            
        } catch (FileNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }

    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(RegionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(RegionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        File r = new File(NbPreferences.forModule(Osm2garmin.class).get("regions",
                System.getProperty("netbeans.user") + "/" + "regions.txt"));
        try {
            DefaultTableModel model = (DefaultTableModel) regionsTable.getModel();
            PrintStream printer = new PrintStream(r);
            for (int i = 0; i < regionsTable.getRowCount(); i++) {
                boolean enabled = (Boolean) model.getValueAt(i, 0);
                String name = (String) model.getValueAt(i, 1);
                float lat1 = (Float) model.getValueAt(i, 2);
                float lon1 = (Float) model.getValueAt(i, 3);
                float lat2 = (Float) model.getValueAt(i, 4);
                float lon2 = (Float) model.getValueAt(i, 5);
                name = name.trim().replace(" ", "_");
                if (!enabled) {
                    printer.print("x");
                }
                if (!name.equals("")) {
                    printer.println(lon1 + " " + lat1 + " " + lon2 + " " + lat2 + " " + name);
                }
            }
            printer.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        String nodesPerRegion = "" + (Integer.parseInt(nodesPerRegionItem.getText()) * 1000000);
        NbPreferences.forModule(Osm2garmin.class).put("nodes_per_region", nodesPerRegion);
        NbPreferences.forModule(Osm2garmin.class).put("auto_split_planet",
                autoSplitPlanetItem.isSelected() ? "true" : "false");    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRegionButton;
    private javax.swing.JCheckBox autoSplitPlanetItem;
    private javax.swing.JButton deleteRegionButton;
    private javax.swing.JButton displayRegionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton moveDownRegionButton;
    private javax.swing.JButton moveUpRegionButton;
    private javax.swing.JTextField nodesPerRegionItem;
    private javax.swing.JTable regionsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent e) {
        int newRow = regionsTable.getSelectedRow();
        if (newRow != selectedRow) {
            selectedRow = newRow;
            if (selectedRow == -1) {
                moveDownRegionButton.setEnabled(false);
                moveUpRegionButton.setEnabled(false);
                displayRegionButton.setEnabled(true);
                deleteRegionButton.setEnabled(false);
            } else {
                if (selectedRow < regionsTable.getRowCount() - 1) {
                    moveDownRegionButton.setEnabled(true);
                } else {
                    moveDownRegionButton.setEnabled(false);
                }
                if (selectedRow > 0) {
                    moveUpRegionButton.setEnabled(true);
                } else {
                    moveUpRegionButton.setEnabled(false);
                }
                displayRegionButton.setEnabled(true);
                deleteRegionButton.setEnabled(true);
            }
        }
        if (autoSplitPlanetItem.isSelected()) {
            moveDownRegionButton.setEnabled(false);
            moveUpRegionButton.setEnabled(false);
            displayRegionButton.setEnabled(true);
            deleteRegionButton.setEnabled(false);
            addRegionButton.setEnabled(false);
        }
    }

    boolean polyNotExists(int row) {
        String region = (String) regionsTable.getModel().getValueAt(row, 1);
        File r = new File(NbPreferences.forModule(Osm2garmin.class).get("regions",
                System.getProperty("netbeans.user") + "/" + "regions.txt")).getParentFile();
        if (r == null) {
            return true;
        }
        File polyFile = new File(r, region + ".poly");
        return !polyFile.exists();
    }

    class PolygonRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            Color foreground = component.getForeground();
            if (!polyNotExists(row)) {
                component.setForeground(Color.lightGray);
            } else {
                component.setForeground(Color.BLACK);
            }
            return component;
        }
    }
}
